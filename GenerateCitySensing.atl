-- @path CitySensing=/BramboProject2k15/model/CitySensing.ecore
-- @path SocialResource=/BramboProject2k15/model/SocialResource.ecore
-- @path City=/BramboProject2k15/model/City.ecore

module GenerateCitySensing;
create OUT: CitySensing from IN: SocialResource, City;


helper context SocialResource!Post def: isInDistrict(d : City!District) : Boolean =
	if d.coordBx < self.place.coordinates.coordx and d.coordEx > self.place.coordinates.coordx
		and d.coordBy < self.place.coordinates.coordy and d.coordEy > self.place.coordinates.coordy
	then
		return true
	else
		return false
	endif;

helper context SocialResource!Post def: hasCoordinates(): Boolean =
	if self.place.coordinates -> size() > 0
	then
		return true
	else
		return false
	endif;
				
helper context City!District def: countPosts(mr : SocialResource!SocialMediaResource) : Integer =
	let lp : OrderedSet(SocialResource!Post) = 
		mr.posts -> select(p | p.hasCoordinates())
	in
		lp -> select(e | e.isInDistrict(self)).size();
		
helper context SocialResource!Post def: hasPicture(): Boolean =
	if self.pictures -> size() > 0
	then
		return true
	else
		return false
	endif;

--- Actually, it's posts with at least 1 picture, not total of pictures
helper context City!District def: countPictures(mr : SocialResource!SocialMediaResource) : Integer =
	let pp : OrderedSet(SocialResource!Post) = 
		mr.posts -> select(p | p.hasPicture() and p.hasCoordinates())
	in
		pp -> select(e | e.isInDistrict(self)).size();

helper context City!District def: countPostsMorning(mr : SocialResource!SocialMediaResource) : Integer =
	let lp : OrderedSet(SocialResource!Post) = 
		mr.posts -> select(p | p.hasCoordinates())
	in
		lp -> select(e | e.isInDistrict(self) --- and e.time. < formato dell'orario 
			).size();

helper context City!District def: countPostsPerLangDist(mr : SocialResource!SocialMediaResource) : Map(SocialResource!Languages, Integer) =
	let lp : OrderedSet(SocialResource!Post) = 
		mr.posts -> select(p | p.hasCoordinates())
	in
		lp -> select(e | e.isInDistrict(self) 
			).size();

rule City2MonitoredCity {
	
	from
		s: City!City()
		
	to 
		t: CitySensing!MonitoredCity (
			name <- s.name,
			districts <- s.districts;
			--- stats <-
		)
	
}

rule District2MonitoredDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource ()
		
	to
		t: CitySensing!District (
			name <- s.name,
			coordBx <- s.coordBx,
			coordBy <- s.coordBy,
			coordEx <- s.coordEx,
			coordEy <- s.coordEy,
			places <- s.places,
			stats <- Sequence{thisModule.Post2NumPostsDist(s, p), thisModule.Post2NumPhotoDist(s, p), thisModule.Post2NumPostLangDist(s, p)}
		)
	
}

rule Place2MonitoredPlace {
	
	from
		s: City!Place ()
		
	to
		t: CitySensing!Place (
			name <- s.name,
			categories <- s.categories,
			--- stats <- 
		)
	
}

rule Category2MonitoredCategory {
	
	from
		s: City!Category ()
		
	to
		t: CitySensing!Category (
			type <- s.type;	
		)
		
}

lazy rule Post2NumPostsDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource()
	to
		t: CitySensing!NumPost (
			name <- '#Posts',
			metric <- s.countPosts(p)
		)
	
}

lazy rule Post2NumPhotoDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource()
	to
		t: CitySensing!NumPhoto (
			name <- '#Pictures',
			metric <- s.countPictures(p)
		)
	
}

lazy rule Post2MorningPostDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource()
	to
		t: CitySensing!NumPostTimeSlot (
			name <- '#Posts per time slot',
			timeSlot <- 'Morning',
			metric <- s.countPostsMorning(p)
		)
			
}

lazy rule Post2NumPostLangDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource()
	to
		t: CitySensing!NumPostLang (
			name <- '#Posts per language',
			langNumber <- s.countPostsPerLangDist(p)
			metric <- s.countPostsMorning(p)
		)
			
}

















