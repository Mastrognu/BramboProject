-- @path CitySensing=/BramboProject2k15/model/CitySensing.ecore
-- @path SocialResource=/BramboProject2k15/model/SocialResource.ecore
-- @path City=/BramboProject2k15/model/City.ecore

module GenerateCitySensing;

create OUT: CitySensing from IN: SocialResource, City;

helper context SocialResource!Post def: hasCoordinates(): Boolean =
	if self.currentCity.coordinates -> size() > 0
		return true
	else
		return false
	endif;
				
helper context City!District def: countPosts(mr : SocialResource!SocialMediaResource) : Integer =
	let lp : Collection(SocialResource!Post) = 
		mr.posts.select(p | p.hasCoordinates())
	in
		lp -> collect(e | self.coordBx < e.place.coordinates.coordx and self.coordEx > e.place.coordinates.coordx
		and self.coordBy < e.place.coordinates.coordy and self.coordEy > e.place.coordinates.coordy	
		).size();
		
	
rule City2MonitoredCity {
	
	from 
		s: City!City()
		
	to 
		t: CitySensing!MonitoredCity (
			name <- s.name,
			districts <- s.districts;
			--- stats <-
		)
	
}

rule District2MonitoredDistrict {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource ()
		
	to
		t: CitySensing!District (
			name <- s.name,
			coordBx <- s.coordBx,
			coordBy <- s.coordBy,
			coordEx <- s.coordEx,
			coordEy <- s.coordEy,
			places <- s.places,
			stats <- thisModule.Post2NumPostsDist(s, p)
		)
	
}

rule Place2MonitoredPlace {
	
	from
		s: City!Place ()
		
	to
		t: CitySensing!Place (
			name <- s.name,
			categories <- s.categories,
			--- stats <- 
		)
	
}

rule Category2MonitoredCategory {
	
	from
		s: City!Category ()
		
	to
		t: CitySensing!Category (
			type <- s.type;	
		)
		
}

lazy rule Post2NumPostsDist {
	
	from
		s: City!District,
		p: SocialResource!SocialMediaResource()
	to
		t: CitySensing!NumPost (
			name <- '#Posts',
			metric <- s.countPosts(p)
		)
	
}





















