module SocialResource2CitySensing;
create OUT: CitySensing from IN: SocialResource;

helper context SocialResource!Post def: city: String =
	if not self.place.city.oclIsUndefined() then
		self.place.city
	else
		if not self.persons.oclIsTypeOf(Author).place.city.oclIsUndefined() then
			self.persons.oclIsTypeOf(Author).place.city
		endif
	endif;
  	
helper context SocialResource!Post def: postCoordx: long =
	if not self.place.coordinates.coordx.oclIsUndefined() then
		self.place.coordinates.coordx
	endif;
	
helper context SocialResource!Post def: postCoordy: long =
	if not self.place.coordinates.coordy.oclIsUndefined() then
		self.place.coordinates.coordy
	endif;

helper context CitySensing!District def: distBCoordx: long =
	if not self.coordBx.oclIsUndefined() then
		self.coordBx
	endif;
	
helper context CitySensing!District def: distBCoordy: long =
	if not self.coordBy.oclIsUndefined() then
		self.coordBy
	endif;
	
helper context CitySensing!District def: distECoordx: long =
	if not self.coordEx.oclIsUndefined() then
		self.coordEx
	endif;
	
helper context CitySensing!District def: distECoordy: long =
	if not self.coordEy.oclIsUndefined() then
		self.coordEy
	endif;
	
helper context CitySensing!District def: countPostPerDistrict: int = 
	let allPosts: OrderedSet(SocialResource!SocialMediaResource) = 
		self.posts
	in
		count(allPosts.select(p | self.distBCoordx < p.postCoordx < self.distECoordx and self.distBCoordy < p.postCoordy < self.distECoordy)) 
	
	
rule Post2District {
	
	from
		s: SocialMediaResource!Post (
			s.belongsToCity()
			s.belongsToDistrict()
		)
	to
		t: CitySensing!NumPostDistr (
			t.postperDist <- postPerDistr + 1
		)
	
}